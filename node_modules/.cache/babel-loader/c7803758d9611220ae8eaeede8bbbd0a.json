{"ast":null,"code":"import _regeneratorRuntime from \"/home/abhishek/Desktop/fyle/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/abhishek/Desktop/fyle/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/abhishek/Desktop/fyle/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/home/abhishek/Desktop/fyle/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/abhishek/Desktop/fyle/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/abhishek/Desktop/fyle/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/abhishek/Desktop/fyle/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/abhishek/Desktop/fyle/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/abhishek/Desktop/fyle/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/abhishek/Desktop/fyle/src/App.js\";\nimport React, { Component } from 'react';\nimport { XmlEntities as Entities } from 'html-entities';\nimport _ from 'lodash';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: true,\n      questions: [],\n      selected: [false, false, false, false, false, false, false, false, false, false]\n    };\n\n    _this.setAnswer = function (e) {\n      e.preventDefault();\n      var index = e.target.name;\n\n      var selected = _toConsumableArray(_this.state.selected);\n\n      if (_this.state.questions[index].correct_answer === e.target.value) {\n        selected[index] = true;\n      } else {\n        selected[index] = false;\n      }\n\n      _this.setState({\n        selected: selected\n      }, function () {\n        return console.log(_this.state.selected);\n      });\n    };\n\n    _this.submit = function (e) {\n      e.preventDefault();\n      var selected = _this.state.selected;\n      var correct = selected.filter(function (value) {\n        return value;\n      }).length;\n      console.log(correct);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var url, response, data, questions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = \"https://opentdb.com/api.php?amount=10\";\n                _context.next = 3;\n                return fetch(url);\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                data = _context.sent;\n                console.log(data.results);\n                questions = data.results.map(function (question) {\n                  var currentQuestion = _objectSpread({}, question);\n\n                  var answers = [question.correct_answer].concat(_toConsumableArray(question.incorrect_answers));\n                  currentQuestion.options = _.shuffle(answers);\n                  return currentQuestion;\n                });\n                console.log(questions); // this.setState({ questions }, () => console.log(this.state.questions));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var entities = new Entities();\n      var questions = this.state.questions; // const questionList = questions.map((question,index) => {\n      //   // console.log(question.options, question.correct_answer);\n      //     return(\n      //         <div key={index}>             \n      //            <div>{index+1}.{entities.decode(question.question)}</div>\n      //            {question.options.length === 2 ? (\n      //               <div onChange={this.setAnswer}>\n      //                 <label>\n      //                   <input type=\"radio\" \n      //                     value={question.options[0]}\n      //                     name={index}\n      //                   />{entities.decode(question.options[0])}\n      //                 </label>\n      //                 <label>\n      //                   <input type=\"radio\" \n      //                     value={question.options[1]}\n      //                     name={index}\n      //                   />{entities.decode(question.options[1])}\n      //                 </label>\n      //               </div>  \n      //             ) : (\n      //               <div onChange={this.setAnswer}>\n      //                   <label>\n      //                   <input type=\"radio\" \n      //                     value={question.options[0]}\n      //                     name={index}\n      //                   />{entities.decode(question.options[0])}\n      //                 </label>\n      //                 <label>\n      //                   <input type=\"radio\" \n      //                     value={question.options[1]}\n      //                     name={index}\n      //                   />{entities.decode(question.options[1])}\n      //                 </label>\n      //                 <label>\n      //                   <input type=\"radio\" \n      //                     value={question.options[2]}\n      //                     name={index}\n      //                   />{entities.decode(question.options[2])}\n      //                 </label>\n      //                 <label>\n      //                   <input type=\"radio\" \n      //                     value={question.options[3]}\n      //                     name={index}\n      //                   />{entities.decode(question.options[3])}\n      //                 </label>\n      //               </div> \n      //             )}     \n      //         </div>\n      //       )\n      //   })\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, this.state.Loading || !this.state.questions ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Loading...\") : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.submit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, questionList || '', React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/abhishek/Desktop/fyle/src/App.js"],"names":["React","Component","XmlEntities","Entities","_","App","state","loading","questions","selected","setAnswer","e","preventDefault","index","target","name","correct_answer","value","setState","console","log","submit","correct","filter","length","url","fetch","response","json","data","results","map","question","currentQuestion","answers","incorrect_answers","options","shuffle","entities","Loading","questionList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { XmlEntities as Entities } from 'html-entities';\nimport _ from 'lodash';\n\nclass App extends Component {\n  \n  state = {\n    loading: true,\n    questions:[],\n    selected:[false,false,false,false,false,false,false,false,false,false]\n  };\n\n  async componentDidMount() {\n    const url = \"https://opentdb.com/api.php?amount=10\";\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data.results);\n    const questions = data.results.map(question => {\n      const currentQuestion = { ...question };\n      const answers = [question.correct_answer, ...question.incorrect_answers];\n      currentQuestion.options = _.shuffle(answers);\n      return currentQuestion;\n    });\n    console.log(questions);\n    // this.setState({ questions }, () => console.log(this.state.questions));\n  }\n\n\n  setAnswer = (e) => {\n    e.preventDefault();\n    const index = e.target.name;\n    const selected = [...this.state.selected];\n    if (this.state.questions[index].correct_answer === e.target.value) {\n      selected[index] = true;\n    } else {\n      selected[index] = false;\n    }\n\n    this.setState({ selected }, () => console.log(this.state.selected));\n  }\n\n  submit = (e) => {\n    e.preventDefault();\n    const { selected } = this.state;\n\n    let correct = selected.filter(value => value).length;\n    console.log(correct);\n  }\n\n  render() { \n    const entities = new Entities();\n    const {questions}= this.state\n    // const questionList = questions.map((question,index) => {\n    //   // console.log(question.options, question.correct_answer);\n    //     return(\n    //         <div key={index}>             \n    //            <div>{index+1}.{entities.decode(question.question)}</div>\n    //            {question.options.length === 2 ? (\n    //               <div onChange={this.setAnswer}>\n    //                 <label>\n    //                   <input type=\"radio\" \n    //                     value={question.options[0]}\n    //                     name={index}\n    //                   />{entities.decode(question.options[0])}\n    //                 </label>\n    //                 <label>\n    //                   <input type=\"radio\" \n    //                     value={question.options[1]}\n    //                     name={index}\n    //                   />{entities.decode(question.options[1])}\n    //                 </label>\n    //               </div>  \n    //             ) : (\n    //               <div onChange={this.setAnswer}>\n    //                   <label>\n    //                   <input type=\"radio\" \n    //                     value={question.options[0]}\n    //                     name={index}\n    //                   />{entities.decode(question.options[0])}\n    //                 </label>\n    //                 <label>\n    //                   <input type=\"radio\" \n    //                     value={question.options[1]}\n    //                     name={index}\n    //                   />{entities.decode(question.options[1])}\n    //                 </label>\n    //                 <label>\n    //                   <input type=\"radio\" \n    //                     value={question.options[2]}\n    //                     name={index}\n    //                   />{entities.decode(question.options[2])}\n    //                 </label>\n    //                 <label>\n    //                   <input type=\"radio\" \n    //                     value={question.options[3]}\n    //                     name={index}\n    //                   />{entities.decode(question.options[3])}\n    //                 </label>\n    //               </div> \n    //             )}     \n    //         </div>\n    //       )\n    //   })\n    \n      return(\n        <div>\n          {this.state.Loading || !this.state.questions ? (\n            <div>Loading...</div>\n            ) : (\n              <div>\n              <form onSubmit={this.submit}>\n                {questionList || ''}\n                <button type=\"submit\">Submit</button>\n              </form>\n              </div>\n            )}        \n        </div>\n      )\n    }\n  }\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}